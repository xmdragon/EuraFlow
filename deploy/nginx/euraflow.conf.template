# EuraFlow Nginx配置模板
# 使用说明：将 {{DOMAIN_NAME}} 和 {{INSTALL_DIR}} 替换为实际值

# 上游服务器配置
upstream euraflow_backend {
    # 使用IP Hash确保会话粘性
    ip_hash;

    # 后端服务器池
    server 127.0.0.1:8000 max_fails=3 fail_timeout=30s;
    # server 127.0.0.1:8001 max_fails=3 fail_timeout=30s;  # 可添加更多实例

    # 保持连接池
    keepalive 32;
}

# 限流区域配置
limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;
limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

# 缓存配置
proxy_cache_path /var/cache/nginx/euraflow levels=1:2 keys_zone=euraflow_cache:10m max_size=1g inactive=60m use_temp_path=off;

# HTTP服务器 - 重定向到HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name {{DOMAIN_NAME}} www.{{DOMAIN_NAME}};

    # Let's Encrypt验证目录
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        allow all;
    }

    # 重定向到HTTPS
    location / {
        return 301 https://{{DOMAIN_NAME}}$request_uri;
    }
}

# 重定向www到非www
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.{{DOMAIN_NAME}};

    # SSL证书
    ssl_certificate /etc/letsencrypt/live/{{DOMAIN_NAME}}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{DOMAIN_NAME}}/privkey.pem;

    # SSL配置
    include /etc/nginx/snippets/ssl-params.conf;

    return 301 https://{{DOMAIN_NAME}}$request_uri;
}

# HTTPS主服务器
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name {{DOMAIN_NAME}};

    # 字符集
    charset utf-8;

    # SSL证书
    ssl_certificate /etc/letsencrypt/live/{{DOMAIN_NAME}}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{DOMAIN_NAME}}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/{{DOMAIN_NAME}}/chain.pem;

    # SSL配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256';
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;

    # DNS解析器
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # 安全头
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self' https: data: 'unsafe-inline' 'unsafe-eval'; frame-ancestors 'self';" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

    # 日志配置
    access_log /var/log/nginx/euraflow_access.log combined buffer=32k flush=5s;
    error_log /var/log/nginx/euraflow_error.log warn;

    # 根目录
    root {{INSTALL_DIR}}/web/dist;
    index index.html;

    # 客户端限制
    client_max_body_size 100M;
    client_body_buffer_size 128k;
    client_body_timeout 60s;
    client_header_timeout 60s;
    send_timeout 60s;

    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_min_length 256;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Brotli压缩（如果模块可用）
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/xhtml+xml application/x-font-ttf application/x-font-opentype application/vnd.ms-fontobject image/svg+xml;

    # 静态文件缓存
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
        expires 30d;
        add_header Cache-Control "public, immutable";
        access_log off;
    }

    # 健康检查端点
    location /health {
        access_log off;
        proxy_pass http://euraflow_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    # API端点
    location /api {
        # 限流
        limit_req zone=api burst=20 nodelay;
        limit_req_status 429;

        # 代理设置
        proxy_pass http://euraflow_backend;
        proxy_http_version 1.1;

        # 代理头
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;

        # 连接设置
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # 缓冲设置
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;

        # 保持连接
        proxy_set_header Connection "";

        # 缓存设置（仅GET请求）
        proxy_cache euraflow_cache;
        proxy_cache_methods GET HEAD;
        proxy_cache_key "$scheme$request_method$host$request_uri$is_args$args";
        proxy_cache_valid 200 302 10m;
        proxy_cache_valid 404 1m;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_bypass $http_cache_control $http_authorization;
        add_header X-Cache-Status $upstream_cache_status;
    }

    # WebSocket端点
    location /ws {
        # 限流
        limit_req zone=general burst=5 nodelay;

        # 代理设置
        proxy_pass http://euraflow_backend;
        proxy_http_version 1.1;

        # WebSocket头
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # 超时设置（WebSocket需要更长的超时）
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;

        # 关闭缓冲
        proxy_buffering off;
    }

    # 认证端点（更严格的限流）
    location ~ ^/api/(auth|login|register) {
        limit_req zone=auth burst=2 nodelay;
        limit_req_status 429;

        proxy_pass http://euraflow_backend;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # 管理后台
    location /admin {
        # IP白名单（根据需要配置）
        # allow 192.168.1.0/24;
        # deny all;

        proxy_pass http://euraflow_backend;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # 禁用缓存
        proxy_cache_bypass 1;
        proxy_no_cache 1;
    }

    # 上传目录（如果需要直接访问）
    location /uploads {
        alias {{INSTALL_DIR}}/uploads;
        expires 7d;
        add_header Cache-Control "public";

        # 防止执行上传的文件
        location ~* \.(php|php5|php7|phtml|pl|py|pyc|pyo|sh|cgi|exe|bat)$ {
            deny all;
        }
    }

    # 指标端点（Prometheus）
    location /metrics {
        # 仅允许内网访问
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;

        proxy_pass http://euraflow_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    # 文档
    location /api/docs {
        proxy_pass http://euraflow_backend;
        proxy_http_version 1.1;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # robots.txt
    location = /robots.txt {
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /api/\nDisallow: /admin/\nDisallow: /uploads/\nAllow: /\n";
    }

    # favicon.ico
    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    # 隐藏文件
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # SPA路由（必须放在最后）
    location / {
        try_files $uri $uri/ /index.html;

        # 设置HTML不缓存
        location = /index.html {
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
        }
    }

    # 错误页面
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

# SSL参数片段（保存到 /etc/nginx/snippets/ssl-params.conf）
# ssl_protocols TLSv1.2 TLSv1.3;
# ssl_prefer_server_ciphers on;
# ssl_dhparam /etc/nginx/dhparam.pem;
# ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
# ssl_ecdh_curve secp384r1;
# ssl_session_timeout 10m;
# ssl_session_cache shared:SSL:10m;
# ssl_session_tickets off;
# ssl_stapling on;
# ssl_stapling_verify on;