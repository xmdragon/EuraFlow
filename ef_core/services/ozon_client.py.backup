"""
Ozon API 客户端
"""
import aiohttp
import asyncio
from typing import Dict, Any, Optional
from datetime import datetime
import json


class OzonAPIClient:
    """Ozon API 客户端"""
    
    def __init__(self, client_id: str, api_key: str):
        """
        初始化Ozon API客户端
        
        Args:
            client_id: Ozon Client ID
            api_key: Ozon API Key
        """
        self.client_id = client_id
        self.api_key = api_key
        self.base_url = "https://api-seller.ozon.ru"
        self.headers = {
            "Client-Id": client_id,
            "Api-Key": api_key,
            "Content-Type": "application/json"
        }
    
    async def test_connection(self) -> Dict[str, Any]:
        """
        测试API连接
        通过调用一个简单的API端点来验证凭证是否有效
        
        Returns:
            包含测试结果的字典
        """
        # 使用 product/list API 来测试连接
        # 这是Ozon最基础的API之一，用于获取商品列表
        # 注意：Ozon API 使用 v3 版本
        endpoint = "/v3/product/list"
        
        # 最小的请求体，只获取1个商品
        # Filter 字段是必需的
        payload = {
            "filter": {
                "offer_id": [],
                "product_id": [],
                "visibility": "ALL"
            },
            "last_id": "",
            "limit": 1
        }
        
        try:
            start_time = datetime.now()
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}{endpoint}",
                    headers=self.headers,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    response_time = (datetime.now() - start_time).total_seconds() * 1000
                    
                    if response.status == 200:
                        data = await response.json()
                        # 测试成功，API凭证有效
                        return {
                            "success": True,
                            "message": "Connection successful",
                            "details": {
                                "api_version": "v2",
                                "response_time_ms": int(response_time),
                                "test_info": {
                                    "status": "API credentials are valid",
                                    "products_count": data.get("result", {}).get("total", 0),
                                    "endpoint_tested": endpoint
                                }
                            }
                        }
                    elif response.status == 401:
                        return {
                            "success": False,
                            "message": "Authentication failed",
                            "details": {
                                "error": "Invalid Client-Id or Api-Key",
                                "response_time_ms": int(response_time)
                            }
                        }
                    elif response.status == 403:
                        return {
                            "success": False,
                            "message": "Access denied",
                            "details": {
                                "error": "API key doesn't have required permissions",
                                "response_time_ms": int(response_time)
                            }
                        }
                    else:
                        error_text = await response.text()
                        return {
                            "success": False,
                            "message": f"API error: {response.status}",
                            "details": {
                                "error": error_text[:200] if error_text else f"HTTP {response.status}",
                                "response_time_ms": int(response_time)
                            }
                        }
                        
        except asyncio.TimeoutError:
            return {
                "success": False,
                "message": "Connection timeout",
                "details": {
                    "error": "Request timed out after 10 seconds"
                }
            }
        except aiohttp.ClientError as e:
            return {
                "success": False,
                "message": "Network error",
                "details": {
                    "error": str(e)
                }
            }
        except Exception as e:
            return {
                "success": False,
                "message": "Unexpected error",
                "details": {
                    "error": str(e)
                }
            }
    
    async def get_products(self, limit: int = 100, last_id: Optional[str] = None) -> Dict[str, Any]:
        """
        获取商品列表
        
        Args:
            limit: 返回的商品数量限制
            last_id: 用于分页的最后一个商品ID
            
        Returns:
            商品列表数据
        """
        endpoint = "/v3/product/list"
        
        payload = {
            "filter": {
                "offer_id": [],
                "product_id": [],
                "visibility": "ALL"
            },
            "last_id": last_id if last_id else "",
            "limit": limit
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}{endpoint}",
                    headers=self.headers,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        error_text = await response.text()
                        raise Exception(f"API error {response.status}: {error_text}")
                        
        except Exception as e:
            raise Exception(f"Failed to get product list: {str(e)}")
    
    async def get_orders(self, date_from: str, date_to: str, limit: int = 100, status: Optional[str] = None) -> Dict[str, Any]:
        """
        获取订单列表
        
        Args:
            date_from: 开始日期 (ISO格式)
            date_to: 结束日期 (ISO格式)
            status: 订单状态筛选
            
        Returns:
            订单列表数据
        """
        endpoint = "/v3/posting/fbs/list"
        
        payload = {
            "dir": "DESC",
            "filter": {
                "since": date_from,
                "to": date_to,
                "status": status
            },
            "limit": limit,
            "offset": 0,
            "with": {
                "analytics_data": True,
                "financial_data": True
            }
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}{endpoint}",
                    headers=self.headers,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        error_text = await response.text()
                        raise Exception(f"API error {response.status}: {error_text}")
                        
        except Exception as e:
            raise Exception(f"Failed to get orders: {str(e)}")
    
    async def get_product_info(self, offer_id: str = None, product_id: int = None) -> Dict[str, Any]:
        """
        获取单个商品详情（包含图片）
        
        Args:
            offer_id: 商品的offer_id
            product_id: 商品的product_id
            
        Returns:
            商品详情数据
        """
        endpoint = "/v2/product/info"
        
        payload = {}
        if offer_id:
            payload["offer_id"] = offer_id
        elif product_id:
            payload["product_id"] = product_id
        else:
            raise ValueError("Either offer_id or product_id must be provided")
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}{endpoint}",
                    headers=self.headers,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        error_text = await response.text()
                        raise Exception(f"API error {response.status}: {error_text}")
                        
        except Exception as e:
            raise Exception(f"Failed to get product info: {str(e)}")
    
    async def get_product_images(self, product_id: int) -> Dict[str, Any]:
        """
        获取商品图片信息
        
        Args:
            product_id: Ozon商品ID
            
        Returns:
            图片数据
        """
        endpoint = "/v2/products/info/attributes"
        
        payload = {
            "filter": {
                "product_id": [product_id],
                "visibility": "ALL"
            },
            "limit": 1
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}{endpoint}",
                    headers=self.headers,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        error_text = await response.text()
                        raise Exception(f"API error {response.status}: {error_text}")
                        
        except Exception as e:
            raise Exception(f"Failed to get product images: {str(e)}")